; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -nomodsect -peephole -globalopt -localcse
; -const=ROM 
	FILE	"..\LOG.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/************************************************************************/
;    2	/*									*/
;    3	/*                      Copyright (C)1999-2008 by Zilog, Inc.               */
;    4	/*                                                                      */
;    5	/************************************************************************/
;    6	/*
;    7		log returns the natural logarithm of its floating
;    8		point argument.
;    9	
;   10		The coefficients are #2705 from Hart & Cheney. (19.38D)
;   11	
;   12		It calls frexp.
;   13	*/
;   14	
;   15	#include <errno.h>
;   16	#include <math.h>
;   17	
;   18	#define	log2	0.693147180559945e0
;   19	#define	ln10	2.30258509299404
;   20	#define	sqrto2	0.707106781186548e0
;   21	#define	p0	-0.240139179559211e2
;   22	#define	p1	0.309572928215377e2
;   23	#define	p2	-0.963769093368687e1
;   24	#define	p3	0.421087371217980e0
;   25	#define	q0	-0.120069589779605e2
;   26	#define	q1	0.194809660700890e2
;   27	#define	q2	-0.891110902798312e1
;   28	
;   29	double log( double arg )
;   30	{
_log:
	LD	HL,-27
	CALL	__frameset
	OR	A,A
;   31		double x,z, zsq, temp;
;   32		int exp;
;   33	
;   34		if ( arg <= 0.0 ){
	SBC	HL,HL
	LD	E,0
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_1
;   35			errno = EDOM;
	LD	BC,4
	LD	(_errno),BC
;   36			return -HUGE_VAL;
	LD	BC,(__huge_val)
	LD	A,(__huge_val+3)
	CALL	__fneg
	LD	E,A
	LD	HL,BC
	JR	L_5
;   37		}
L_1:
;   38	    x = frexp( arg, & exp );
	PEA	IX+-15
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_frexp
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	LD	(IX+-5),E
;   39		if ( x < sqrto2 ){
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	BC,3474675
	LD	A,63
	CALL	__fcmp
	JP	P,L_4
	OR	A,A
;   40			x *= 2;
	SBC	HL,HL
	LD	E,64
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fmul
	LD	(IX+-8),BC
	LD	(IX+-5),A
;   41			exp--;
	LD	BC,(IX+-15)
	DEC	BC
	LD	(IX+-15),BC
;   42		}
L_4:
;   43	
;   44		z = (x-1)/(x+1);
	LD	HL,8388608
	LD	E,63
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__fsub
	LD	(IX+-27),BC
	LD	(IX+-24),A
	LD	A,(IX+-5)
	LD	BC,(IX+-8)
	LD	HL,8388608
	LD	E,63
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-27)
	LD	A,(IX+-24)
	CALL	__fdiv
	LD	(IX+-19),BC
	LD	(IX+-16),A
;   45		zsq = z*z;
	LD	E,(IX+-16)
	LD	A,(IX+-16)
	LD	HL,BC
	CALL	__fmul
	LD	(IX+-4),BC
	LD	(IX+-1),A
;   46	
;   47		temp = ((p3*zsq + p2)*zsq + p1)*zsq + p0;
	LD	HL,14129348
	LD	E,62
	CALL	__fmul
	LD	HL,1717243
	LD	E,193
	CALL	__fadd
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,16230537
	LD	E,65
	CALL	__fadd
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,12590209
	LD	E,193
	CALL	__fadd
	LD	(IX+-12),BC
	LD	(IX+-9),A
;   48		temp = temp/(((1.0*zsq + q2)*zsq + q1)*zsq + q0);
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	LD	HL,955367
	LD	E,193
	CALL	__fadd
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,10213637
	LD	E,65
	CALL	__fadd
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__fmul
	LD	HL,4201601
	LD	E,193
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-12)
	LD	A,(IX+-9)
	CALL	__fdiv
	LD	(IX+-12),BC
	LD	(IX+-9),A
;   49		temp = temp*z + exp*log2;
	LD	HL,(IX+-19)
	LD	E,(IX+-16)
	LD	A,(IX+-9)
	CALL	__fmul
	LD	(IX+-23),BC
	LD	BC,(IX+-15)
	LD	(IX+-20),A
	CALL	__itol
	CALL	__ltof
	LD	HL,3240472
	LD	E,63
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-23)
	LD	A,(IX+-20)
	CALL	__fadd
	LD	(IX+-12),BC
	LD	(IX+-9),A
;   50		return temp;
	LD	E,(IX+-9)
	LD	HL,BC
;   51	}
L_5:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _log ***************************
;Name                         Addr/Register   Size   Type
;_frexp                              IMPORT  -----   function
;__huge_val                          IMPORT      4   variable
;_errno                              IMPORT      3   variable
;z                                    IX-19      4   variable
;exp                                  IX-15      3   variable
;temp                                 IX-12      4   variable
;x                                     IX-8      4   variable
;zsq                                   IX-4      4   variable
;arg                                   IX+6      4   parameter


; Stack Frame Size: 39 (bytes)
;       Spill Code: 0 (instruction)


	XREF _frexp:ROM
	XREF __huge_val:ROM
	XREF _errno:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fneg:ROM
	XREF __fcmp:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __frameset:ROM
	XDEF _log
	END
