; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -nomodsect -peephole -globalopt -localcse
; -const=ROM 
	FILE	"..\USSCAN.C"
	.assume ADL=1
	SEGMENT DATA
_sscan_fsa:
	DB	2
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	8
	DB	254
	DB	3
	DB	5
	DB	4
	DB	9
	DB	6
	DB	254
	DB	254
	DB	254
	DB	254
	DB	254
	DB	5
	DB	4
	DB	9
	DB	6
	DB	254
	DB	254
	DB	254
	DB	254
	DB	254
	DB	5
	DB	4
	DB	9
	DB	6
	DB	254
	DB	254
	DB	254
	DB	254
	DB	254
	DB	254
	DB	254
	DB	9
	DB	6
	DB	254
	DB	254
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	7
	DB	6
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
	DB	255
;    1	/*************************************************
;    2	 *  Copyright (C) 1999-2008 by  Zilog, Inc.
;    3	 *  All Rights Reserved
;    4	 *************************************************/
;    5	
;    6	#include <format.h>
;    7	#include <stddef.h>
;    8	#include <stdarg.h>
;    9	
;   10	/* actions */
;   11	
;   12	#define ACC -1
;   13	#define ERR -2
;   14	
;   15	#define CR 13
;   16	#define LF 10
;   17	
;   18	/*					   +-{0..9}
;   19				 {sp,tab,nl}{h,l,L}|   +-{d,i,o,u,x,e,f,g,s,c,p,n}
;   20				       |       |   |   |       {others}
;   21				   %   |   *   |   |   |   [   ]   |
;   22				+-----------------------------------+ */
;   23	static char sscan_fsa[10][9] = {
	SEGMENT CODE
;   24		/* 0 */ 	{  2,  0,  1,  1,  1,  1,  1,  1,  1},
;   25		/* 1 */ 	{ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC},
;   26		/* 2 */ 	{  8,ERR,  3,  5,  4,  9,  6,ERR,ERR},
;   27		/* 3 */ 	{ERR,ERR,ERR,  5,  4,  9,  6,ERR,ERR},
;   28		/* 4 */ 	{ERR,ERR,ERR,  5,  4,  9,  6,ERR,ERR},
;   29		/* 5 */ 	{ERR,ERR,ERR,ERR,ERR,  9,  6,ERR,ERR},
;   30		/* 6 */ 	{  6,  6,  6,  6,  6,  6,  6,  7,  6},
;   31		/* 7 */ 	{ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC},
;   32		/* 8 */ 	{ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC},
;   33		/* 9 */ 	{ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC,ACC},
;   34				};
;   35	
;   36	/*************************************************
;   37	*
;   38	* _u_sscan - scan a scanf format string
;   39	*
;   40	* Inputs:
;   41	*	fmt - pointer to format string
;   42	*	str - pointer to fmt_type structure
;   43	*	      where the results are put
;   44	*
;   45	* Returns:
;   46	*	new pointer to format string
;   47	*
;   48	*************************************************/
;   49	char *_u_sscan(char *fmt, struct fmt_type *str) {
__u_sscan:
	LD	HL,-7
	CALL	__frameset
;   50	  char pstate;
;   51	  char state = 0;
	LD	(IX+-2),0
;   52	  unsigned char class;
;   53	  char ch;
;   54	
;   55	  str->flags = 0;
	LD	IY,(IX+9)
	LD	(IY+1),0
;   56	  str->field_width = 0;
	LD	(IY+5),0
;   57	  str->precision = 0;
	LD	(IY+6),0
;   58	  str->size = 0;
	LD	(IY+2),0
;   59	  str->type = '\0';
	LD	(IY+4),0
;   60	
;   61	  for (;;) {
L_55:
;   62	    ch = *(fmt++);
	LD	BC,(IX+6)
	LD	(IX+-7),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-3),A
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;   63	    switch(ch) {
	LD	A,(IX+-3)
	SEXT	HL
	LD	L,(IX+-3)
	CALL	__case8
L__0:
	DW	35
	DB	37
	DW24	L_1	

	DB	42
	DW24	L_2	

	DB	48
	DW24	L_6	

	DB	49
	DW24	L_7	

	DB	50
	DW24	L_8	

	DB	51
	DW24	L_9	

	DB	52
	DW24	L_10	

	DB	53
	DW24	L_11	

	DB	54
	DW24	L_12	

	DB	55
	DW24	L_13	

	DB	56
	DW24	L_14	

	DB	57
	DW24	L_15	

	DB	65
	DW24	L_16	

	DB	69
	DW24	L_17	

	DB	70
	DW24	L_18	

	DB	71
	DW24	L_19	

	DB	76
	DW24	L_5	

	DB	88
	DW24	L_20	

	DB	91
	DW24	L_34	

	DB	93
	DW24	L_35	

	DB	97
	DW24	L_21	

	DB	99
	DW24	L_22	

	DB	100
	DW24	L_23	

	DB	101
	DW24	L_24	

	DB	102
	DW24	L_25	

	DB	103
	DW24	L_26	

	DB	104
	DW24	L_3	

	DB	105
	DW24	L_27	

	DB	108
	DW24	L_4	

	DB	110
	DW24	L_28	

	DB	111
	DW24	L_29	

	DB	112
	DW24	L_30	

	DB	115
	DW24	L_31	

	DB	117
	DW24	L_32	

	DB	120
	DW24	L_33	

	DW24	L_36	

;   64	      case '%':
L_1:
;   65			class = 0;
	LD	(IX+-1),0
;   66			break;
	JR	L_37
;   67	      /*****   Treat these as pass through:
;   68	      case ' ':
;   69	      case '\t':
;   70	      case '\n':
;   71			class = 1;
;   72			break;
;   73	      ****/
;   74	      case '*':
L_2:
;   75			class = 2;
	LD	(IX+-1),2
;   76			break;
	JR	L_37
;   77	      case 'h':
L_3:
;   78	      case 'l':
L_4:
;   79	      case 'L':
L_5:
;   80			class = 3;
	LD	(IX+-1),3
;   81			break;
	JR	L_37
;   82	      case '0':
L_6:
;   83	      case '1':
L_7:
;   84	      case '2':
L_8:
;   85	      case '3':
L_9:
;   86	      case '4':
L_10:
;   87	      case '5':
L_11:
;   88	      case '6':
L_12:
;   89	      case '7':
L_13:
;   90	      case '8':
L_14:
;   91	      case '9':
L_15:
;   92			class = 4;
	LD	(IX+-1),4
;   93			break;
	JR	L_37
;   94	      case 'A':
L_16:
;   95	      case 'E':
L_17:
;   96	      case 'F':
L_18:
;   97	      case 'G':
L_19:
;   98	      case 'X':
L_20:
;   99	      case 'a':
L_21:
;  100	      case 'c':
L_22:
;  101	      case 'd':
L_23:
;  102	      case 'e':
L_24:
;  103	      case 'f':
L_25:
;  104	      case 'g':
L_26:
;  105	      case 'i':
L_27:
;  106	      case 'n':
L_28:
;  107	      case 'o':
L_29:
;  108	      case 'p':
L_30:
;  109	      case 's':
L_31:
;  110	      case 'u':
L_32:
;  111	      case 'x':
L_33:
;  112			class = 5;
	LD	(IX+-1),5
;  113			break;
	JR	L_37
;  114	      case '[':
L_34:
;  115			class = 6;
	LD	(IX+-1),6
;  116			break;
	JR	L_37
;  117	      case ']':
L_35:
;  118			class = 7;
	LD	(IX+-1),7
;  119			break;
	JR	L_37
;  120	      default:
L_36:
;  121			class = 8;
	LD	(IX+-1),8
;  122	    }
L_37:
;  123	
;  124	    pstate = state;
	LD	A,(IX+-2)
	LD	(IX+-4),A
;  125	    state = sscan_fsa[state][class];
	LD	A,(IX+-2)
	SEXT	HL
	LD	L,(IX+-2)
	LD	A,9
	CALL	__imul_b
	LD	A,(IX+-1)
	LD	BC,_sscan_fsa
	ADD	HL,BC
	LD	BC,HL
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-2),A
;  126	
;  127	    switch (state) {
	SEXT	HL
	LD	L,(IX+-2)
	CALL	__case24
L__1:
	DW	10
	DW	1
	DB	0
	DW24	L_40	

	DW	3
	DB	0
	DW24	L_42	

	DW	4
	DB	0
	DW24	L_43	

	DW	5
	DB	0
	DW24	L_44	

	DW	6
	DB	0
	DW24	L_45	

	DW	7
	DB	0
	DW24	L_53	

	DW	8
	DB	0
	DW24	L_41	

	DW	9
	DB	0
	DW24	L_54	

	DW	65534
	DB	255
	DW24	L_39	

	DW	65535
	DB	255
	DW24	L_38	

	DW24	L_55	

;  128	      case ACC:
L_38:
;  129			str->status = FMT_OK;
	LD	IY,(IX+9)
	LD	(IY+0),0
;  130			return(fmt-1);
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	JR	L_57
;  131	      case ERR:
L_39:
;  132			str->status = FMT_ERR;
	LD	IY,(IX+9)
	LD	(IY+0),1
;  133			return(fmt-1);
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	JR	L_57
;  134	      case 1:
L_40:
;  135	      case 8:
L_41:
;  136			str->status = FMT_PASS_THRU;
	LD	IY,(IX+9)
	LD	(IY+0),2
;  137			str->chr = ch;
	LD	A,(IX+-3)
	LD	(IY+3),A
;  138			return(fmt);
	LD	HL,(IX+6)
	JR	L_57
;  139	      case 3:
L_42:
;  140			str->flags |= FMT_FLAG_IGNORE;
	LD	IY,(IX+9)
	LD	A,(IY+1)
	SET	4,A
	LD	(IY+1),A
;  141			break;
	JR	L_55
;  142	      case 4:
L_43:
;  143			str->field_width = str->field_width * 10 + (ch - '0');
	LD	IY,(IX+9)
	LD	B,(IY+5)
	LD	C,10
	MLT	BC
	LD	A,(IX+-3)
	ADD	A,-48
	LD	B,A
	LD	A,C
	ADD	A,B
	LD	(IY+5),A
;  144			break;
	JR	L_55
;  145	      case 5:
L_44:
;  146			str->size = ch;
	LD	A,(IX+-3)
	LD	IY,(IX+9)
	LD	(IY+2),A
;  147			break;
	JR	L_55
;  148	      case 6:
L_45:
;  149			if (pstate != state) {
	LD	A,(IX+-4)
	CP	A,(IX+-2)
	JR	Z,L_55
;  150			  str->flags |= FMT_FLAG_SET;
	LD	IY,(IX+9)
	LD	A,(IY+1)
	SET	7,A
	LD	(IY+1),A
;  151			  str->set_begin = fmt;
	LD	BC,(IX+6)
	LD	(IY+7),BC
;  152	                  // Check for sets that start with [] or [^]
;  153	                  if (*fmt == '^')
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,94
	SBC	HL,BC
	JR	NZ,L_50
;  154	                     fmt++;
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
L_50:
;  155	                  if (*fmt == ']')
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,93
	SBC	HL,BC
	JR	NZ,L_55
;  156	                     fmt++;
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  157	
;  158			}
;  159			break;
	JR	L_55
;  160	      case 7:
L_53:
;  161			str->set_end = fmt-1;
	LD	IY,(IX+6)
	LEA	BC,IY+-1
	LD	IY,(IX+9)
	LD	(IY+10),BC
;  162			break;
	JR	L_55
;  163	      case 9:
L_54:
;  164			str->type = ch;
	LD	A,(IX+-3)
	LD	IY,(IX+9)
	LD	(IY+4),A
;  165			break;
	JR	L_55
;  166	    }
;  167	  }
;  168	}
L_57:
	LD	SP,IX
	POP	IX
	RET	


;**************************** __u_sscan ***************************
;Name                         Addr/Register   Size   Type
;_sscan_fsa                          STATIC     90   variable
;pstate                                IX-4      1   variable
;ch                                    IX-3      1   variable
;state                                 IX-2      1   variable
;class                                 IX-1      1   variable
;str                                   IX+9      3   parameter
;fmt                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


	XREF __frameset:ROM
	XREF __case24:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF __u_sscan
	END
