; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -nomodsect -peephole -globalopt -localcse
; -const=ROM 
	FILE	"..\BSEARCH.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/************************************************************************/
;    2	/*									*/
;    3	/*			Copyright (C)1987-2008 by				*/
;    4	/*		            Zilog, Inc.           			*/
;    5	/*									*/
;    6	/*		        San Jose, California     			*/
;    7	/*									*/
;    8	/************************************************************************/
;    9	#include <stddef.h>
;   10	#include <stdlib.h>
;   11	
;   12	/*************************************************
;   13	*
;   14	* bsearch - binary search
;   15	*
;   16	* Inputs:
;   17	*	key	- key to search for
;   18	*	base	- base of array to be sorted
;   19	*	num	- number of elements
;   20	*	width	- size of each element
;   21	*	comp	- pointer to function for comparison
;   22	*
;   23	* Returns:
;   24	*	nothing
;   25	*
;   26	*************************************************/
;   27	void *bsearch(char *key,
;   28	              char *base,
;   29	              size_t num,
;   30	              size_t width,
;   31	              int (*comp)(void *,void *))
;   32	{
_bsearch:
	LD	HL,-18
	CALL	__frameset
;   33	  unsigned int mid;
;   34	  unsigned int low;
;   35	  unsigned int high;
;   36	  int d;
;   37	  unsigned int pmid;
;   38	  char *addr;
;   39	
;   40		/* make high the nearest power of two for */
;   41		/* efficiency and to ensure we always	  */
;   42		/* terminate properly.			  */
;   43		/* Note that high is always higher	  */
;   44		/* than it should be so that we will	  */
;   45		/* not fail to find the last entry in the */
;   46		/* table.				  */
;   47	
;   48	  high = 0x0001;
	LD	BC,1
	LD	(IX+-6),BC
;   49	  while (high <= num)
	JR	L_0
L_1:
;   50	    high <<= 1;
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	(IX+-6),HL
L_0:
	LD	BC,(IX+-6)
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_1
;   51	  low = 0;
	LD	BC,0
	LD	(IX+-9),BC
;   52	  mid = 0;
	LD	(IX+-3),BC
;   53	
;   54		/* begin the search */
;   55	
;   56	  for(;;) {
L_11:
;   57	    pmid = mid;
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
;   58	    mid = ((high - low) >> 1) + low;
	LD	BC,(IX+-9)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-3),HL
;   59	
;   60	    if (pmid == mid)		/* terminate because we're  */
	LD	BC,HL
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_5
	OR	A,A
;   61	      return(NULL);		/* oscilating.		    */
	SBC	HL,HL
	JR	L_13
L_5:
;   62	
;   63	    if (mid >= num) {		/* we're above the array.   */
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_6
;   64	      high = mid;		/* pretend element is larger*/
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
;   65	      continue; 		/* than the key.	    */
	JR	L_11
;   66	    }
L_6:
;   67	
;   68	    d = (*comp)(key,addr = base + mid * width);
	LD	HL,(IX+-3)
	LD	BC,(IX+15)
	CALL	__imulu
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+18)
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	__indcall
	POP	BC
	POP	BC
	LD	(IX+-12),HL
;   69	    if (d == 0) 		/* we found it		    */
	CALL	__icmpzero
	JR	NZ,L_10
;   70	      return(addr);
	LD	HL,(IX+-15)
	JR	L_13
L_10:
;   71	    if (d < 0)			/* key is less than mid,    */
	LD	HL,(IX+-12)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_9
;   72	      high = mid;		/* set high to mid.	    */
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
;   73	    else			/* key is greater than mid, */
	JR	L_11
L_9:
;   74	      low = mid;		/* set low to mid.	    */
	LD	BC,(IX+-3)
	LD	(IX+-9),BC
;   75	  }
	JR	L_11
;   76	}
L_13:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _bsearch ***************************
;Name                         Addr/Register   Size   Type
;pmid                                 IX-18      3   variable
;addr                                 IX-15      3   variable
;d                                    IX-12      3   variable
;low                                   IX-9      3   variable
;high                                  IX-6      3   variable
;mid                                   IX-3      3   variable
;comp                                 IX+18      3   parameter
;width                                IX+15      3   parameter
;num                                  IX+12      3   parameter
;base                                  IX+9      3   parameter
;key                                   IX+6      3   parameter


; Stack Frame Size: 39 (bytes)
;       Spill Code: 0 (instruction)


	XREF __indcall:ROM
	XREF __imulu:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _bsearch
	END
